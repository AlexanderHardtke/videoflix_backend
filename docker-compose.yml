services:
  web:
    build: .
    container_name: videoflix_backend
    ports:
      - 8000:8000
    volumes:
      - ./src:/app
      - ./static:/app/staticfiles
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    command: >-
      sh -c "
        python manage.py migrate --noinput &&
        python manage.py collectstatic --noinput &&
        python manage.py ensure_superuser &&
        gunicorn videoflix_backend.wsgi:application --bind 0.0.0.0:8000 --workers 4
      "

  rqworker_720p:
    build: .
    container_name: videoflix_rqworker_720p
    command: python manage.py rqworker queue_720p
    depends_on:
      web:
        condition: service_started
      redis:
        condition: service_healthy
    volumes:
      - ./src:/app
    env_file:
      - .env

  rqworker_360p:
    build: .
    container_name: videoflix_rqworker_360p
    command: python manage.py rqworker queue_360p
    depends_on:
      web:
        condition: service_started
      redis:
        condition: service_healthy
    volumes:
      - ./src:/app
    env_file:
      - .env

  rqworker_240p:
    build: .
    container_name: videoflix_rqworker_240p
    command: python manage.py rqworker queue_240p
    depends_on:
      web:
        condition: service_started
      redis:
        condition: service_healthy
    volumes:
      - ./src:/app
    env_file:
      - .env
  rqworker_144p:
    build: .
    container_name: videoflix_rqworker_144p
    command: python manage.py rqworker queue_preview144p
    depends_on:
      web:
        condition: service_started
      redis:
        condition: service_healthy
    volumes:
      - ./src:/app
    env_file:
      - .env
  rqworker_images:
    build: .
    container_name: videoflix_rqworker_images
    command: python manage.py rqworker queue_image
    depends_on:
      web:
        condition: service_started
      redis:
        condition: service_healthy
    volumes:
      - ./src:/app
    env_file:
      - .env

  rqworker_clear_token:
    build: .
    container_name: videoflix_rqworker_token
    command: python manage.py rqworker queue_token
    depends_on:
      web:
        condition: service_started
      redis:
        condition: service_healthy
    volumes:
      - ./src:/app
    env_file:
      - .env

  rq-scheduler:
    build: .
    command: python manage.py rqscheduler
    depends_on:
      web:
        condition: service_started
      redis:
        condition: service_healthy
    volumes:
      - ./src:/app
    env_file:
      - .env

  db:
    image: postgres:17
    container_name: postgres_db
    volumes:
      - postgres_db:/var/lib/postgresql/data/
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      retries: 6
      start_period: 30s
      timeout: 10s

  redis:
    image: redis:7
    container_name: videoflix_redis
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 6
      start_period: 5s

volumes:
  postgres_db: